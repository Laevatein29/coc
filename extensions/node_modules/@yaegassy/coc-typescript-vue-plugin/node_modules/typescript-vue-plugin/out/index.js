"use strict";
const typescript_1 = require("@volar/typescript");
const vue = require("@vue/language-core");
const externalFiles = new WeakMap();
const windowsPathReg = /\\/g;
const init = (modules) => {
    const { typescript: ts } = modules;
    const pluginModule = {
        create(info) {
            const virtualFiles = vue.createVirtualFiles(vue.createLanguages(ts, info.languageServiceHost.getCompilationSettings(), getVueCompilerOptions()));
            (0, typescript_1.decorateLanguageService)(virtualFiles, info.languageService, true);
            (0, typescript_1.decorateLanguageServiceHost)(virtualFiles, info.languageServiceHost, ts, ['.vue']);
            const getCompletionsAtPosition = info.languageService.getCompletionsAtPosition.bind(info.languageService);
            info.languageService.getCompletionsAtPosition = (fileName, position, options) => {
                const result = getCompletionsAtPosition(fileName, position, options);
                if (result) {
                    result.entries = result.entries.filter(entry => entry.name.indexOf('__VLS_') === -1);
                }
                return result;
            };
            return info.languageService;
            function getVueCompilerOptions() {
                if (info.project.projectKind === ts.server.ProjectKind.Configured) {
                    const tsconfig = info.project.getProjectName();
                    return vue.createParsedCommandLine(ts, ts.sys, tsconfig.replace(windowsPathReg, '/')).vueOptions;
                }
                else {
                    return vue.createParsedCommandLineByJson(ts, ts.sys, info.languageServiceHost.getCurrentDirectory(), {}).vueOptions;
                }
            }
        },
        getExternalFiles(project, updateLevel = 0) {
            if (updateLevel >= (1)
                || !externalFiles.has(project)) {
                const oldFiles = externalFiles.get(project);
                const newFiles = (0, typescript_1.searchExternalFiles)(ts, project, ['.vue']);
                externalFiles.set(project, newFiles);
                if (oldFiles && !arrayItemsEqual(oldFiles, newFiles)) {
                    project.refreshDiagnostics();
                }
            }
            return externalFiles.get(project);
        },
    };
    return pluginModule;
};
function arrayItemsEqual(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    const set = new Set(a);
    for (const file of b) {
        if (!set.has(file)) {
            return false;
        }
    }
    return true;
}
module.exports = init;
//# sourceMappingURL=index.js.map